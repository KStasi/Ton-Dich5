(cell, cell, cell, cell, int, int) load_data() impure {
    ;; dict players, dict matches, dict prices, dict ban_requests, int seqno, int pubkey
    var ds = get_data().begin_parse();
    return (ds~load_dict(),
        ds~load_dict(), 
        ds~load_dict(), 
        ds~load_dict(), 
        ds~load_uint(32), 
        ds.preload_uint(256));
}

() store_data(cell players, cell matches, cell prices, cell ban_requests, int seqno, int public_key) impure {
    set_data(begin_cell()
        .store_dict(players)
        .store_dict(matches) 
        .store_dict(prices)
        .store_dict(ban_requests)
        .store_uint(seqno, 32)
        .store_uint(public_key, 256)
        .end_cell());
}

cell store_user(slice owner_address, cell users, int paid_until, int bans_counter, cell units) impure {
    cell user = begin_cell()
        .store_uint(paid_until, 32)
        .store_uint(bans_counter, 32)
        .store_dict(units)
        .end_cell();
    users~udict_set_ref(256, slice_hash(owner_address), user);
    return users;
}

(int, int, cell) load_user(slice owner_address, cell users) method_id {
    ;; int paid_until, int bans_counter, cell units
    cell user = idict_get_ref(users, 256, slice_hash(owner_address));
    if (user.null?()) {
        return (-1, -1, user);
    }
    slice s_user = user.begin_parse();
    return (s_user~load_uint(32), s_user~load_uint(32), s_user.preload_dict());

}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (msg_seqno, valid_until) = (cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until <= now());
  var ds = get_data().begin_parse();
  (cell players, cell matches, cell prices, cell ban_requests, int stored_seqno, int public_key) = load_data();
  ds.end_parse();
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, public_key));
  accept_message();
  cs~touch();
  while (cs.slice_refs()) {
    var mode = cs~load_uint(8);
    send_raw_message(cs~load_ref(), mode);
  }
  cs.end_parse();
  store_data(players, matches, prices, ban_requests, stored_seqno + 1, public_key);
}

() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}